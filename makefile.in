# $Id: makefile.in,v 1.33 2018/04/01 19:12:36 tom Exp $
# Makefile-template for 'add'

THIS		= add
RELEASE		= t20180401
SCREEN		= curses

#### Start of system configuration section. ####

srcdir		= @srcdir@
VPATH		= @srcdir@

transform	= @program_transform_name@
ACTUAL		= `echo $(THIS)|sed '$(transform)'`

prefix		= @prefix@
exec_prefix	= @exec_prefix@

datarootdir	= @datarootdir@
bindir		= @bindir@
datadir		= @datadir@
mandir		= @mandir@
manext		= 1

BINDIR		= $(DESTDIR)$(bindir)
DATADIR		= $(DESTDIR)$(datadir)
MANDIR		= $(DESTDIR)$(mandir)/man$(manext)

CC		= @CC@
LINK		= $(CC)
INSTALL		= @INSTALL@
INSTALL_PROGRAM	= @INSTALL_PROGRAM@
INSTALL_SCRIPT	= @INSTALL_SCRIPT@
INSTALL_DATA	= @INSTALL_DATA@

CTAGS		= @CTAGS@
ETAGS		= @ETAGS@
LINT		= @LINT@

LIBS		= @LIBS@
CPPFLAGS	= @CPPFLAGS@ -DHAVE_CONFIG_H -DRELEASE=\"$(RELEASE)\" -DADD_HELPFILE=\"$(datadir)/$(ACTUAL).hlp\" -I. -I$(srcdir)
CFLAGS		= @CFLAGS@ @EXTRA_CFLAGS@
LDFLAGS		= @LDFLAGS@

x		= @EXEEXT@

#### End of system configuration section. ####

SHELL		= /bin/sh

.c.o:
	@RULE_CC@
	@ECHO_CC@$(CC) -c $(CPPFLAGS) $(CFLAGS) $<

OBJ = $(THIS).o $(SCREEN).o

PROG	= $(THIS)$x

all:	$(PROG)

$(PROG): $(OBJ)
	@ECHO_LD@$(LINK) $(CFLAGS) $(LDFLAGS) -o $(PROG) $(OBJ) $(LIBS)

$(OBJ): $(THIS).h screen.h

DIRS = $(BINDIR) $(DATADIR) $(MANDIR)

install: $(PROG) $(DIRS)
	$(INSTALL_PROGRAM) $(PROG) $(BINDIR)/$(ACTUAL)$x
	$(SHELL) $(srcdir)/rename.sh $(srcdir)/xterm.sh    $(ACTUAL) $(BINDIR)/x+ $(INSTALL_SCRIPT)
	$(SHELL) $(srcdir)/rename.sh $(srcdir)/$(THIS).hlp $(ACTUAL) $(DATADIR)/$(ACTUAL).hlp $(INSTALL_PROGRAM)
	$(SHELL) $(srcdir)/rename.sh $(srcdir)/$(THIS).1   $(ACTUAL) $(MANDIR)/$(ACTUAL).$(manext) $(INSTALL_DATA) 

$(DIRS):
	mkdir -p $@

uninstall:
	rm -f $(BINDIR)/$(ACTUAL)$x
	rm -f $(BINDIR)/x+
	rm -f $(DATADIR)/$(ACTUAL).hlp
	rm -f $(MANDIR)/$(ACTUAL).$(manext)

mostlyclean ::
	rm -f *.o core *~ *.BAK *.trace *.atac

clean :: mostlyclean
	rm -f $(PROG)

distclean :: clean
	rm -f makefile config.log config.cache config.status config.h man2html.tmp
	rm -f tags TAGS

realclean :: distclean
	@-

tags:
	$(CTAGS) $(THIS).c $(SCREEN).c $(HDRS)

@MAKE_UPPER_TAGS@TAGS:
@MAKE_UPPER_TAGS@	$(ETAGS) $(THIS).c $(SCREEN).c $(HDRS)

lint:
	$(LINT) $(LINTOPTS) $(CPPFLAGS) $(THIS).c $(SCREEN).c

# I keep my sources in RCS, and assign a symbolic release to the current patch
# level.  The 'manifest' script knows how to build a list of files for a given
# revision.
MANIFEST:
	manifest -r$(RELEASE) \
		$(THIS).man testing/case*.dcl testing/case*.bat

dist: MANIFEST
	- rm -f .fname .files
	echo $(THIS)-$(RELEASE) >.fname
	cat MANIFEST | grep ' ' | egrep -v ' subdirectory$$' | sed -e 's/\ .*//' | uniq >.files
	rm -rf `cat .fname`
	TOP=`cat .fname`; mkdir $$TOP `cat .files | grep / | sed -e 's@/.*@@' | sed -e s@\^@$$TOP/@ | uniq`
	for file in `cat .files`; do \
	  ln $(srcdir)/$$file `cat .fname`/$$file \
	    || { echo copying $$file instead; cp $$file `cat .fname`/$$file; }; \
	done
	tar cf - `cat .fname` | gzip >`cat .fname`.tgz
	rm -rf `cat .fname` .fname .files
	ls -l *.tgz

# Some of the output will be uuencoded because the test scripts include
# <CR><LF> terminated ".bat" files for MS-DOS.
dist-shar: MANIFEST
	- rm -f .fname .files
	echo $(THIS)-$(RELEASE) >.fname
	cat MANIFEST | grep ' ' | egrep -v ' subdirectory$$' | sed -e 's/\ .*//' | uniq >.files
	shar -M -n`cat .fname` -opart -l50 `cat .files`
	- rm -f .fname .files
	ls -l part.*

$(THIS).o:	config.h

check: $(PROG)
	cd testing; sh ./run_test.sh	
